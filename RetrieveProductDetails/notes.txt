SQL Syntax for insert/update/delete.
------------------------------------
Often there is unique numeric 'id' column.

SELECT 
	columnA, 
	columnB 
FROM nameoftable
WHERE 
	idColumns = 12;

INSERT INTO nameoftable (
	columnA,
	columnB
) VALUES (
	"Value A",
	"Value B"
);

UPDATE nameoftable SET
	columnA = "New Value A",
	columnB = "New Value B"
WHERE 
	idColumn = 12;
	

DELETE FROM nameoftable 
WHERE 
	columnA = "New Value A";	

----------------
Why not use a numeric id? 
 - Makes it hard/impossible to predict adjacent values
 - Big datasets? - sometimes a pre-fix is used for sharding
 - Distributed systems, to prevent collisions

















DELIMITER $$
DROP PROCEDURE IF EXISTS AddDessertAndArt$$
CREATE PROCEDURE AddDessertAndArt(
	IN nameOfDessert varchar(155),
	IN goodOrNot tinyint(1),
	OUT art varchar(255)
)
BEGIN
	INSERT INTO goodstuff (
		name, 
		good
	) VALUES (
		nameOfDessert, 
		goodOrNot
	);
	SELECT CONCAT(good,
		GROUP_CONCAT(goodstuff.name SEPARATOR ', ')
	) INTO art
	FROM goodstuff
	WHERE goodstuff.good = 1;
END$$
DELIMITER ;







- Example which uses multiple queries

DELIMITER $$

CREATE PROCEDURE GetAlsoGood(
	IN id int(10),
	OUT good tinyint(1),
	OUT alsoGood tinyint(1)
)
BEGIN
	SELECT goodstuff.good
	INTO good
	FROM goodstuff
	WHERE goodstuff.id = id;
  
  	SELECT goodstuff.good
	INTO alsoGood
	FROM goodstuff
	WHERE goodstuff.id = id + 1;
END$$

DELIMITER ;





DELIMITER $$

CREATE PROCEDURE GetIsGood(
	IN id int(10),
	OUT goodBAD tinyint(1)
)
BEGIN
  SELECT goodstuff.good
  INTO good
  FROM goodstuff
  WHERE goodstuff.id = id;
END$$

DELIMITER ;










SQL EXAMPLES:
------------------------------------
create database desserts;
use desserts;
create table goodstuff (id int(10) NOT NULL AUTO_INCREMENT, name varchar(55), good tinyint(1), PRIMARY KEY (id));
insert into goodstuff (name, good) VALUES ("chocolate", 0);
insert into goodstuff (name, good) VALUES ("tiramisu", 1);
insert into goodstuff (name, good) VALUES ("bananas", 1);








DataSource
	- connection configuration
Connection
	- active connection
Statement 
	- SQL Query ie: SELECT * FROM awesomePeople;
ResultSet 
	- Represents result of query



















1.) Java Database Connectivity (JDBC) 
n.) Databases ... 
	- JDBC needs to be agnostic - not specific to any database implementation
	- SQL based
	- Driver (database driver)
	- mysql, postres, oracle, mongo, mariadb, sql server
	
Benefits:
	- As long as data is somewhat simple - we can swap out
	- our database. 
		- Dev vs prod
		- Fast development
		- Flexibility 
		- Upgrades
		- Portability
		- Migrations	
		












Windows - operating system
Docker - application container
---------- JVM ----------
Tomcat - application
War file - our code / our logic
---------- Traditional way of packaging ----------
Tomcat is a java application (we're not building this)
 -> our war file is part of it (building this though)
 -> web.xml - shows tomcat how to integrate our code




---------- Modern way of packaging ----------
Our code ie: spring-web
 -> dependency 
 	-> tomcat server




















Adding a dessert:
 >> curl -X POST 'http://localhost:8081/widgets/desserts' --data 'dessert-name=Tira+Misu+2' --compressed -vi

Showing desserts:
 >> curl -X GET 'http://localhost:8081/widgets/desserts' -vi



GET - Get it
POST - Add it
PUT - Update it
DELETE - Delete it

Create/Read/Update/Delete (CRUD)

-----------------------------------

HTTP VERBS/METHODS

Request:
-----------------------------
GET - Get me that content please?
	|| No body, just a path
	|| browsers show history? Yes
	|| can I go back to it? Back button? Yes
	
POST - Add this content please?
	|| Yes is has a body
	|| browsers don't keep in history
	|| can I go back to it? Not really - some browsers yes
	
PUT - Update this content please?
	|| The path should point to the content being updated
	|| Yes is has a body
	|| browsers don't keep in history
	|| can I go back to it? Not really - some browsers yes
	
DELETE - Delete this content please?
	|| The path should point to the content being deleted
	|| Delete has no body
	|| no history
	|| can I go back to it? maybe? not really 
	
OPTIONS - Show me what I can do please?
	|| The path should point to the content being questioned
	|| No body
	|| no history
	
-----------------


Cached: Local copy is kept - a request will show local copy vs going on the network to get fresh copy. - saves effort


Response:
-----------------------------
GET - Here is your content
	|| Body
	|| Body is cached (often)

POST - Here is your result
	|| Body
	|| Body not cached
		
PUT - Here is your result
	|| Body
	|| Body not cached
	
DELETE - Yes/No
	|| No Body
	|| No Cache

OPTIONS - Here are the options
	|| No Body
	|| Cached























Project: LockedMe.com
Developer: Bas Kuis

---------------------------------

Duration: 3 weeks
Type: Scrum
Sprint Duration: 1 week

-------------------------------------

Sprint 1:
	 - Build welcome screen
	 - Add app name and developer details
	 - Show main menu
	 - Show options in main menu
	 - Add option 1 in main menu (Show files in ascending order)
	 - Support closing the application

Sprint 2:
	 - Show option 2 (file operations)
	 - Show File operations menu
	 - Add option 1 in file operations. Add a file
	 - Add option 2 in file operations. Delete a file

Sprint 3: (keeping it light to account for unknowns)
     - Search a file
     - Back to main menu





























Functional Interfaces
 - Interface with one method
 - can be used with a lambda 
 	- () -> {}
 	- basically a method without a class around it
 
 
























ClassA extends ClassB

ClassB extends AbstractClassC

ClassC extends ClassA, ClassB ? 
	- Older construct 
	- not allowed
	- diamond problem 
		- ClassC would know which method to call in case of a conflict
		- Methods have implementations in classes / they have bodies

InterfaceA extends InterfaceB, InterfaceC ? 
	- Newer construct 
	- is allowed
	- no diamond problem
		- If Class D implements InterfaceA it would have to provide a 
		  single methods implementation for conflicting requirements
		  from interfaces	

		  	SomeClassA
		  	/		\
		   /		 \
	InterfaceB     InterfaceC
		   \		 /
		    \	    /
			InterfaceD
			
	- Defaults methods
		- Where can we add them? Interfaces
		- They are really just like other methods
			- with implementations 
	- Why not a diamond problem? Why is that? It is not consistent?
		- Should we use it? - yes, but don't go overboard
		- People that make java made a mistake? - kind of .. 
		- Java needed to be more flexible - and also backwards compatible
			- Default methods were introduced to make java more flexible - and keep backwards compatibility 







Method:
void someName() {
	
}
	- needs to be in class

Lambda Expression:
() -> {
	
}
	 - it's a method 
	 - standalone 
	 - nameless
	 - but can be assigned to variable
	 - provides flexibility
	 - Since Java 8



Javascript example:
-----------
() => {
	
}
-----------
function hello() {
	
}

























dependency a 
	- dependency d (version > 2)
dependency b 
	- dependency c
		- dependency d (version = 1)

























Apache Tomcat - Java application (web server)
	-> war file (our code + web stuff)

----------------------------------------------
	
JVM - will run tomcat + our stuff
	-> scope = provided
	-> these files are also in tomcat already

----------------------------------------------


























Maven Web Application

Maven (build tool)
	 - The pom.xml tell maven what to do (ie: how to build the project) 
	 - It can build java projects
	 - It can create jar files
	 - It can create war file 
	 	- Difference between jar/war?
		 	- jar file - java application
		 	- war file - web application
		 	
What does a war file have that jar file doesn't have?
	- java/class files - our code
	- web.xml		 	
		- path routing etc 
		- shows where servlets are 
			- class in java ee - exposes application to network
	- static web content
		- html
		- js
		- css
		- images

Do still need web server.
	- Our java application application needs a home - that knows how to expose it on the network
	- apache 
	- nginx
	- others
	
	- In the case of java projects - the popular webserver??
		- apache tomcat.



- Tell maven to create war file
- Add in servlet dependency
- Add a hello world servlet
- Add web.xml - configure to use hello world servlet
- Add method to test war file with tomcat?
	- Run war with tomcat


















DAO

The manager or a team
-------- Data Access Object | DAO | Manager
-------- Is doing something 
        -- it retrieves, persists and removes etc DTO from 
        -- underlaying datastore

A team member
-------- Data Transfer Object | DTO | Object
-------- Not doing anything 
        -- only methods are getters/setters 

DAO ---- Data Access Object
 -- Separate the getting data from how to get it.
























What is an artifact?
--------------------------

source code

build 

produces something (artifact) 
		 java -> jar/war
		 c++ -> executable
		 go -> executable
		 docker -> image
		
artifact 
 - immutable
 - versioned/tracked
 
repository
 - npm
 - maven
 - docker registry
 - many more... 
	private (for a company)
	public (for the community) 
 
---------------------------


























Fix Bugs of the Application.
DESCRIPTION

Project objective:

As a developer, fix the bugs in the application using the appropriate algorithmic techniques.


Background of the problem statement:

You have been assigned a few tasks during the sprint planning. Solving the bugs raised by the testing team is one among them. You are given the boilerplate code and are asked to complete it by fixing the bugs.

 

Bugs to be fixed:

Add the missing source code to the application based on searching technique. Find the appropriate comments to code for the searching technique.
Write source code for sorting the predefined array and ensure the functionality of the application. Find the appropriate comments to code for sorting the predefined array.
You can download the boilerplate code by executing the command below in your git bash.
git clone https://github.com/Simplilearn-Edu/Full-Stack---The-Desk-Application-.git

 

You must use the following:

Eclipse/IntelliJ: An IDE to code for the application
Java: A programming language to develop the prototype
Git: To connect and push files from local system to GitHub
GitHub: To store the application code and track its versions 
Search and Sort techniques: Select the relevant data structure algorithms to fix the bugs
 

Following requirements should be met:

The source code should be pushed to your GitHub repositories. You need to document the steps and write the algorithms in the Google Docs.
The link of your GitHub repository is must. In order to track your task, you need to share the link of the repository. You can add a section in the Google Docs.
Document the step-by-step process involved in completing this task.











mvn archetype:generate -DgroupId=simplilearn.example -DartifactId=my-webapp -DarchetypeArtifactId=maven-archetype-webapp -DinteractiveMode=false









validate
generate-sources
process-sources
generate-resources
process-resources
compile







validate: 
 - validate the project is correct and all necessary information is available
compile: 
 - compile the source code of the project
test: 
 - test the compiled source code using a suitable unit testing framework. These tests should not require the code be packaged or deployed
package: 
 - take the compiled code and package it in its distributable format, such as a JAR.
integration-test: 
 - process and deploy the package if necessary into an environment where integration tests can be run
verify: 
 - run any checks to verify the package is valid and meets quality criteria
install: 
 - install the package into the local repository, for use as a dependency in other projects locally
deploy: 
 - done in an integration or release environment, copies the final package to the remote repository for sharing with other developers and projects.












Graph 

    *     (*)---*
    |    /      |
   [*]--*       *
   / \ /	
  *   *
  |   |
      *

----------------------------

List
*-*-*-*

----------------------------

Tree
*-*-*-*
  \*-*---*
      \*

----------------------------

Binary Tree

           *
          / \
         *   *
        / \ / \









insertion sort
O(n^2)/2

----------------------------
                     PASS
2, 3, 3, 1, 7, 8, 1   |
|                     | 
   |  |  |            |
1, 2, 3, 3, 7, 8, 1   |
         |            |
            |  |  |   |
1, 2, 3, 1, 3, 7, 8   |
|
   |  |  |
1, 1, 2, 3, 3, 7, 8  
-----------------------

- do multiple rounds until done (not moving anything else)




selection sort

1, 3, 3, 1, 7, 8, 9
|
   |  |  |  |  |  |

- compare with rest of list and swap
- move on to the next

O(n^2)/2

--------------------

bubble sort

1, 3, 3, 1, 7, 8, 9
|
   |

O(n^2)

- compare and swap
- move on to the next
- do multiple rounds until done (not moving anything else)




















create newNode;

	newNode >>> adress[99998] (first one)
	newNode2 >>> adress[12334] (second one)
	newNode3 >>> adress[23233] (second one)
	

/** only for the first - special case */
if (this.head == null) {
    this.tail = this.head = newNode;
    return;
}

	this.tail >>> address[99998] 
	this.head >>> address[99998]
	newNode >>> adress[99998]



/** attaching new node */
this.tail.next = newNode2;

adress[99998].next >>> adress[12334]


/** now that done - the brand new one is the last */
this.tail = newNode2;

this.tail >>> address[12334]

address[12334].next >>> address[23233]

this.tail >>> address[23233]






















Singly Linked List

-------------------

head -> First Node

Node -> next Node
Node -> next Node
Node -> next Node
Node -> next Node

tail -> Last Node


Real world example: 
Track the names of people on the call























Java
order statistics 


mean/average age = sum(all) / size
median age = order everybody by age - take the middle person


23
32
42
21
54
21
24
33

get the mean age
get the median age
























Real life examples of array rotation:

CircuitBreaker 
- needed to keep track of n number of events
- needed to be performant 
	- circular datastructure 
	- range based queries needed sequential order

In memory log 
- need to be very performant 
- did not need to retain more than n records
	- circular datastructure - re-uses previous indexes
	- array rotation came into place - to convert the log to sequential order
	


Array rotation

[0] -- tree
[1] -- house
[2] -- boat
[3] -- cup
[4] -- water

We want 'house' to be the first entry in the array
- tree will have to move to position 4


increment all by 1

tree
house
boat
cup
water

---

[ tree - house - boat - cup - water ]
 
 --> water to the beginning - everything else moved 1 spot 
 
[ water - tree - house - boat - cup ]


0 - n

0 1 2 3 4 5 6 7 8 9 101
%5
0 1 2 3 4 0 1 2 3 4 1

6 % 5 = 1
5 % 5 = 0
1 % 5 = 1
2 % 5 = 2
0 % 5 = 0























 maven
 - what is it? 
 
 /src
 /src/java
 /src/java/main
 /src/java/main/com
 /src/java/main/com/company
 /src/java/main/com/company/Main.java
 
 MAVEN solves these questions
  - but I want to use a database (just an example)?
  	- go community - and look existing code (jar)
  		- any popular maven repository
  - pom.xml --- (file that has locations and version of other code we use)		
  		
  - I'm going use existing code 
  	- 1.) find where it is --- maven repository (web accessible)
  	- 2.) and download it --- maven downloads jars
  	- 3.) use it --- maven packages jars with my code/project
  		- lot's of possible options here --- maven learning curve starts here
 
 in the end:
 
 we have a 'package' 
 [ 		
	 /src --- our code
	 /libs --- the community code
	 	/multiple community components 
 ]	
 
 jar .. 
 - it's like a zip archive - but with a jar extension
 - inside are class files (our code)
 - inside are other jar files (other people's code)
 - inside are some configuration files - like a MANIFEST.MF and other things to help the jvm read it correctly. 
 	- MAVEN takes care of doing this - it calls it packaging.
 	
 - MAVEN -> our project -> creates a jar



















Data structures in Java?
 - what are they?
 - Different ways to store data 
 	- Choose one over the other depending on how you use it?
 - Collection of data and way to interact with it
 - Arrays/Queue/List/Stack
 - key / value pairs
 - multiple bits of data
 	- how to keep them organized?
 
real world example:	(Last In First Out)
 - clothes 
   - drawer 
     - things you wear like are? 
       - sits on top

digital example: (Last In First Out)    	
 - users of a webstore 
   - answer questions about new users 
     - how would you store them
 
- program slows down

     	
















Diamond problem


                  Animal
                    /\
                   /  \
                  /    \
             Cat /      \ Dog
				 \	    / 
				  \    /
                   \  /
                    \/ --- in Java these lines can't meet
                   Pet


What are the implications?
 - What if 
 	Dog -> public String soundItMakes();
    Cat -> public String soundItMakes();
		Pet -> public String soundItMakes(); ?? which is it?? 
			-> wouldn't be clear which it is
			-> compiler could make some choices - use Dog .. or Cat .. or neither?
	Java .. compiler .. just won't let you do this.
	
			


















A:
===============================================
Strong association - Rufus extends Dog etc...
Rufus is a Dog
Dog is a Mammal
Mammal is an Animal


B:
===============================================
Weak association - Rufus contains Dog etc...
Rufus has a Dog
Dog has a Mammal
Mammal has an Animal


A feel more natural

----------------------------

B is much more common .. 
 - 












inheritance 

specific --> more generic 



Rufus     -> Dog       -> Mammal    -> Animal -> Living -> Object

has name  -> has breed -> offspring -> 
can bark


Brutus    -> Cat       -> Mammal    -> Animal -> Living -> Object 

has name  -> has breed -> offspring -> 
can meow

-----------------------------------------------




















abstract class Cereal {
	
	abstract boolean itIsGood();
	
	abstract String getName();
	
	boolean willIEatIt() {
		if (itIsGood()) {
			return true;
		}
		System.out.println("Not eating " + getName() + " is it not good");
		return false;
	}
	
}






















java 
- folders and files
files all have a *.java extension
each *.java file has a matching public class inside

ie: 
	- MyObject.java contains [public class MyObject]

packages are .. just .. folders 

jar? what is a lot like zip archive of the compiled class files









































void method() throws SomeException {
	
}
Checked?? (required)
Unchecked?? (optional)
Both?? (yeah you can do it for both)

MyException extends Exception (Checked)
MyException extends RuntimeException (Un-Checked)

throw new MyException()

try {
	??? Try some code 
} 

catch (MyException e) {
	??? Catches exception // handles // recover? // log?
}

finally {
	??? No matter what .. do this
}



















Exceptions... 

Example:

NullPointerException
- NPE
- Happens a lot

Checked or unchecked?
A: Checked
B: Unchecked

checked vs unchecked
?? how do we know - what makes it checked vs unchecked?


----------------------------------------
You'll choose:

Unchecked exception:
NullPointerException -> RuntimeException -> Exception -> Throwable
----------------------- makes it unchecked ------------ makes it throwable

- not a real issue for application to run correctly
- writing less code // relying more on (loose working agreement, tribal/documented)
- frameworks/tools usually handle these ok

Checked exception:
MyCheckedException -> Exception -> Throwable
----------------------------------- makes it throwable

- real issue for application to run correctly
- writing more code // relying less on (loose working agreement, tribal/documented)
- explicitly choose not to collaborate with external frameworks 


















Atomic ?? what does that mean
- there is one 
- base level 
- simplest 

Atomic counter .. 

class MyNumber {

	int number = 0;
	
	int increment(int by) {
		number = number + by;
	}
	
	int getNumber() {
		return this.number;
	}

}

??

It's a version that is safe to be shared across multiple threads















Race between the tortoise and the hare.

hare is fast but arrogant
tortoise is slow but persistent

- hare get's far ahead - and takes a nap before finishing
- by the time he wakes up
- the tortoise is too far ahead
- the hare runs as fast as he can 
- but the tortoise wins the race

-------------------------------------------

race -----------------------------------------------------------|
       \--tortoise------------------------------------WAKE UP!--/
       \--hare-------------------------NAP----------------------/
























-----



how may can I have? 
- no real limit - you can have 1000's 

- how many should I have? 
	- depends on the runtime environment - how many CPU's??
	- if that is not clear - keep below 20
	
	
	20 threads but only 1 CPU core
		- what happens 
		CPU -> context switching  
			-> run some part of a thread - then 'switch' to another
			-> context switching - requires memory to be moved 
				-> expensive/slow
		



















 - Application
 	- Controller 
 		- Service 
 			- Service B 
 				- Client (HTTP)
 					- Library 
 						- Library Component 
 							- Throws error / has error

 If you had to write code to pass errors up to the Controller
 - that would be a lot of work
 - error prone 


 						<- pass the error back
 					<- Library pass the error back
 				<- Client pass the error back
 			<- Service B pass the error back
 		<- Service pass the error back 
 	<- Controller - shows the error to the customer
>


 - Application
 	- Controller 
 		- Service 
 			- Service B 
 				- Client (HTTP)
 					- Library 
 						- Library Component 
 							- Throws error / has error
 							- throw new Exception("Unable to parse BLA-12") -> Thread stops here and jumps to the next 'relevant' try block -> catch clause

 	Controller:
 		try {
	 		try {
	 			Service.call()
	 		} catch (Exception) {
		 		// AA
	 		}
 		} catch (Exception e) {
	 		// BB
	 	}

 						<- Error is thrown 
 					....
 				....
 			....
 		.... 
 	<- Controller - shows the error to the customer






Polymorphism - Java??

Ability for objects to take different forms 
 - compile-time
 	- overloading
 - runtime 
 	- dynamic method
 	- closures 



Why is the point? 
 - readable --- handle difficult things better
 	- understandable? 
 - code re-use 
 - flexibility 
 - objects .. are a way of grouping like things 
 - categorize .. taxonomy/categories .. not perfect 
 - pragmatic .. efficient .. need flexibility 
 
 account for anything that doesn't match existing taxonomy
 - also - DRY - (Don't repeat yourself)
 	- less code
 	- generalizing
 	
 
 	













String message = "Hi merry, santa.2007@northpole.io Christmas eve!";

Pattern.compile("[\s]+[^\s]+@[^\s]{2,253}.[a-b]{2,55}");

[\s]+[^\s]+@[^\s]{2,253}.[a-b]{2,55}

^ - start of string
$ - end of string

-- pattern
[0-9a-zU.*] match one character of for example, 5 or t or U or . or *
-- special character within []
^ - NOT

-- Quantifiers
[somestuff]+          // 1 or more
[somestuff]?          // 0 or 1
[somestuff]*          // 0 or more
[somestuff]{3}        // needs to be 3

I WAS NOT CORRECT - [somestuff]{3-5}      // doesn't work -- sorry
I WAS NOT CORRECT - [somestuff]{3,5}      // needs to be 3 or 5 <- range



